This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-11T06:39:06.886Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
src/App.css
src/App.js
src/App.test.js
src/components/CreatePost/CreatePostModal.jsx
src/components/ForgotPassword.jsx
src/components/HomeRight/HomeRight.jsx
src/components/HomeRight/PopularUserCard.jsx
src/components/MiddlePart/MiddlePart.jsx
src/components/MiddlePart/StoryCircle.jsx
src/components/Post/PostCard.jsx
src/components/ProtectedRoute.jsx
src/components/Reels/CreateReelsForm.jsx
src/components/Reels/Reels.jsx
src/components/Reels/UserReelCard.jsx
src/components/ResetPassword.jsx
src/components/SearchUser/SearchUser.jsx
src/components/SideBar/SideBar.jsx
src/components/SideBar/SideBarNavigation.js
src/config/api.js
src/index.css
src/index.js
src/logo.svg
src/pages/Authentication/Authentication.jsx
src/pages/Authentication/Login.jsx
src/pages/Authentication/Register.jsx
src/pages/HomePage/HomePage.jsx
src/pages/Message/ChatMessage.jsx
src/pages/Message/Message.jsx
src/pages/Message/UserChatCard.jsx
src/pages/Profile/Profile.jsx
src/pages/Profile/ProfileModal.jsx
src/Redux/Auth/auth.action.js
src/Redux/Auth/auth.actionType.js
src/Redux/Auth/auth.reducer.js
src/Redux/Comment/comment.action.js
src/Redux/Comment/comment.actionType.js
src/Redux/Comment/comment.reducer.js
src/Redux/Message/message.action.js
src/Redux/Message/message.actionType.js
src/Redux/Message/message.reducer.js
src/Redux/Post/post.action.js
src/Redux/Post/post.actionType.js
src/Redux/Post/post.reducer.js
src/Redux/store.js
src/Redux/User/user.action.js
src/Redux/User/user.reducer.js
src/Redux/User/user.types.js
src/reportWebVitals.js
src/setupTests.js
src/theme/DarkTheme.js
src/utils/isLikedByReqUser.js
src/utils/isSavedByReqUser.js
src/utils/uploadToCloudinary.js

================================================================
Repository Files
================================================================

================
File: src/App.css
================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

================
File: src/App.js
================
// src/App.js
import React, { useEffect } from 'react';
import { Route, Routes, Navigate } from 'react-router-dom';
import './App.css';
import Authentication from './pages/Authentication/Authentication';
import HomePage from './pages/HomePage/HomePage';
import Message from './pages/Message/Message';
import { useDispatch, useSelector } from 'react-redux';
import ProtectedRoute from './components/ProtectedRoute';
import Login from './pages/Authentication/Login';
import Register from './pages/Authentication/Register';
import ForgotPassword from './components/ForgotPassword';
import ResetPassword from './components/ResetPassword';
import Profile from './pages/Profile/Profile'; // Import Profile directly
import Reels from './components/Reels/Reels';
import CreateReelsForm from './components/Reels/CreateReelsForm';
import { getProfileAction } from './Redux/User/user.action';

function App() {
  const auth = useSelector(store => store.auth);
  const user = useSelector(store => store.user);
  const dispatch = useDispatch();
  const jwt = localStorage.getItem('jwt');

  useEffect(() => {
    if (jwt) {
      dispatch(getProfileAction(jwt));
    }
  }, [jwt, dispatch]);

  return (
    <div>
      <Routes>
        {/* Public Routes */}
        <Route path="/login" element={<Authentication><Login /></Authentication>} />
        <Route path="/register" element={<Authentication><Register /></Authentication>} />
        <Route path="/forgot-password" element={<ForgotPassword />} />
        <Route path="/reset-password" element={<ResetPassword />} />

        {/* Protected Routes */}
        <Route
          path="/"
          element={
            <ProtectedRoute>
              <HomePage />
            </ProtectedRoute>
          }
        >
          {/* Nested Protected Routes */}
          <Route path="profile/:id" element={<Profile />} />
          <Route path="reels" element={<Reels />} />
          <Route path="create-reels" element={<CreateReelsForm />} />
          {/* Add other nested routes here if necessary */}
        </Route>
        <Route
          path="/message"
          element={
            <ProtectedRoute>
              <Message />
            </ProtectedRoute>
          }
        />

        {/* Fallback Route */}
        <Route path="*" element={<Navigate to={user.profile.data ? "/" : "/login"} replace />} />
      </Routes>
    </div>
  );
}

export default App;

================
File: src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/components/CreatePost/CreatePostModal.jsx
================
import {
  Avatar,
  Backdrop,
  Box,
  Button,
  CircularProgress,
  IconButton,
  Modal,
} from "@mui/material";
import { useFormik } from "formik";
import React, { useState } from "react";
import ImageIcon from "@mui/icons-material/Image";
import VideocamIcon from "@mui/icons-material/Videocam";
import { uploadToCloudinary } from "../../utils/uploadToCloudinary";
import { useDispatch } from "react-redux";
import { createPostAction } from "../../Redux/Post/post.action";

const style = {
  position: "absolute",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  width: 500,
  bgcolor: "background.paper",
  boxShadow: 24,
  p: 4,
  borderRadius: ".6rem",
  outline: "none",
};

const CreatePostModal = ({ open, handleClose }) => {
  const [selectedImage, setSelectedImage] = useState();
  const [selectedVideo, setSelectedVideo] = useState();
  const [isLoading, setIsLoading] = useState(false);
  const dispatch = useDispatch();

  const handleSelectImage = async (event) => {
    setIsLoading(true);
    const imageUrl = await uploadToCloudinary(event.target.files[0], "image");
    setSelectedImage(imageUrl);
    setIsLoading(false);
    formik.setFieldValue("image", imageUrl);
  };

  const handleSelectVideo = async (event) => {
    setIsLoading(true);
    const videoUrl = await uploadToCloudinary(event.target.files[0], "video");
    setSelectedVideo(videoUrl);
    setIsLoading(false);
    formik.setFieldValue("video", videoUrl);
  };

  const formik = useFormik({
    initialValues: {
      caption: "",
      image: "",
      video: "",
    },
    onSubmit: (values) => {
      console.log("Submit values", values);
      dispatch(createPostAction(values));
    },
  });

  return (
    <Modal
      open={open}
      onClose={handleClose}
      aria-labelledby="modal-modal-title"
      aria-describedby="modal-modal-description"
    >
      <Box sx={style}>
        <form onSubmit={formik.handleSubmit}>
          <div>
            <div className="flex space-x-4 items-center">
              <Avatar />
              <div>
                <p className="font-bold text-lg">Code With Tom</p>
                <p className="text-sm">@codewithtom</p>
              </div>
            </div>
            <textarea
              className="outline-none w-full mt-5 p-2 bg-transparent border border-[#3b4054] rounded-sm"
              placeholder="What are you thinking?"
              name="caption"
              onChange={formik.handleChange}
              value={formik.values.caption}
              rows="4"
            ></textarea>

            <div className="flex space-x-5 items-center mt-5">
              <div>
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleSelectImage}
                  style={{ display: "none" }}
                  id="image-input"
                />
                <label htmlFor="image-input">
                  <IconButton color="primary" component="span">
                    <ImageIcon />
                  </IconButton>
                </label>
                <span>Image</span>
              </div>

              <div>
                <input
                  type="file"
                  accept="video/*"
                  onChange={handleSelectVideo}
                  style={{ display: "none" }}
                  id="video-input"
                />
                <label htmlFor="video-input">
                  <IconButton color="primary" component="span">
                    <VideocamIcon />
                  </IconButton>
                </label>
                <span>Video</span>
              </div>
            </div>

            {selectedImage && (
              <div>
                <img className="h-[10rem]" src={selectedImage} alt="" />
              </div>
            )}

            {selectedVideo && (
              <div>
                <video className="h-[10rem]" src={selectedVideo} />
              </div>
            )}

            <div className="flex w-full justify-end">
              <Button
                type="submit"
                variant="contained"
                sx={{ borderRadius: "1.5rem" }}
              >
                Post
              </Button>
            </div>
          </div>
        </form>
        <Backdrop
          sx={(theme) => ({ color: "#fff", zIndex: theme.zIndex.drawer + 1 })}
          open={isLoading}
          onClick={handleClose}
        >
          <CircularProgress color="inherit" />
        </Backdrop>
      </Box>
    </Modal>
  );
};

export default CreatePostModal;

================
File: src/components/ForgotPassword.jsx
================
import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { forgotPassword } from '../Redux/Auth/auth.action';

const ForgotPassword = () => {
    const [email, setEmail] = useState('');
    const dispatch = useDispatch();
    const auth = useSelector(state => state.auth);

    const handleSubmit = (e) => {
        e.preventDefault();
        dispatch(forgotPassword(email));
    }

    return (
        <div className="forgot-password-container">
            <h2>Forgot Password</h2>
            <form onSubmit={handleSubmit}>
                <div>
                    <label>Email Address:</label>
                    <input 
                        type="email" 
                        value={email} 
                        onChange={(e) => setEmail(e.target.value)} 
                        required 
                    />
                </div>
                <button type="submit">Send Reset Link</button>
            </form>
            {auth.loading && <p>Loading...</p>}
            {auth.error && <p className="error">{auth.error}</p>}
            {auth.message && <p className="success">{auth.message}</p>}
        </div>
    );
}

export default ForgotPassword;

================
File: src/components/HomeRight/HomeRight.jsx
================
import React from "react";
import SearchUser from "../SearchUser/SearchUser";
import PopularUserCard from "./PopularUserCard";
import { Card } from "@mui/material";

const popularUser = [1, 1, 1, 1];
const HomeRight = () => {
  return (
    <div className="pr-5">
      <SearchUser />

      <Card className="p-5">
        <div className="flex justify-between py-5 items-center">
          <p className="font-semibold opacity-70">Suggestions for you</p>
          <p className="text-xs font-semibold opacity-95">View All</p>
        </div>
        <div className="space-y-5">
          {popularUser.map((item) => (
            <PopularUserCard />
          ))}
        </div>
      </Card>
    </div>
  );
};

export default HomeRight;

================
File: src/components/HomeRight/PopularUserCard.jsx
================
import { Avatar, Button, CardHeader, IconButton } from "@mui/material";
import React from "react";
import { red } from "@mui/material/colors";

const PopularUserCard = () => {
  return (
    <div>
      <CardHeader
        avatar={
          <Avatar sx={{ bgcolor: red[500] }} aria-label="recipe">
            R
          </Avatar>
        }
        action={
          <Button size="small">
            Follow
          </Button>
        }
        title="Code With Tom"
        subheader="@codewithtom"
      />
    </div>
  );
};

export default PopularUserCard;

================
File: src/components/MiddlePart/MiddlePart.jsx
================
import { Avatar, Card, IconButton } from "@mui/material";
import React, { useEffect, useState } from "react";
import AddIcon from "@mui/icons-material/Add";
import StoryCircle from "./StoryCircle";
import ImageIcon from "@mui/icons-material/Image";
import VideocamIcon from "@mui/icons-material/Videocam";
import ArticleIcon from "@mui/icons-material/Article";
import PostCard from "../Post/PostCard";
import CreatePostModal from "../CreatePost/CreatePostModal";
import { useDispatch, useSelector } from "react-redux";
import { getAllPostAction } from "../../Redux/Post/post.action";
import { getSavedPostsAction } from "../../Redux/User/user.action";

const story = [1, 1, 1, 1];
// const posts = [1, 1, 1, 1];
const MiddlePart = () => {
  const dispatch = useDispatch();
  const { post } = useSelector((store) => store);
  const [openCreatePostModal, setOpenCreatePostModal] = useState(false);
  const handleCloseCreatePostModal = () => setOpenCreatePostModal(false);
  const handleOpenCreatePostModal = () => setOpenCreatePostModal(true);

  useEffect(() => {
    console.log("post data", post);
    dispatch(getAllPostAction());
    dispatch(getSavedPostsAction());
  }, [post.newComment, dispatch]);

  return (
    <div className="px-20">
      <section className="flex items-center p-5 rounded-b-md">
        <div className="flex flex-col items-center mr-4 cursor-pointer">
          <Avatar sx={{ width: "5rem", height: "5rem" }}>
            <AddIcon sx={{ fontSize: "3rem" }} />
          </Avatar>
          <p>New</p>
        </div>
        {story.map((item) => (
          <StoryCircle />
        ))}
      </section>
      <Card className="p-5 mt-5">
        <div className="flex justify-between">
          <Avatar />
          <input
            onClick={handleOpenCreatePostModal}
            readOnly
            className="outline-none w-[90%] rounded-full px-5 bg-transparent border-[#3b3054] border"
            type="text"
            placeholder="What are you thinking?"
          />
        </div>
        <div className="flex justify-center space-x-9 mt-5">
          <div className="flex items-center">
            <IconButton color="primary" onClick={handleOpenCreatePostModal}>
              <ImageIcon />
            </IconButton>

            <span>Image</span>
          </div>
          <div className="flex items-center">
            <IconButton color="primary" onClick={handleOpenCreatePostModal}>
              <VideocamIcon />
            </IconButton>

            <span>Video</span>
          </div>
          <div className="flex items-center">
            <IconButton color="primary" onClick={handleOpenCreatePostModal}>
              <ArticleIcon />
            </IconButton>

            <span>Write Article</span>
          </div>
        </div>
      </Card>

      <div className="mt-5 space-y-5">
        {post.posts.map((item) => (
          <PostCard item={item} />
        ))}
      </div>

      <div>
        <CreatePostModal
          open={openCreatePostModal}
          handleClose={handleCloseCreatePostModal}
        />
      </div>
    </div>
  );
};

export default MiddlePart;

================
File: src/components/MiddlePart/StoryCircle.jsx
================
import { Avatar } from "@mui/material";
import React from "react";

const StoryCircle = () => {
  return (
    <div>
      <div className="flex flex-col items-center mr-4 cursor-pointer">
        <Avatar
          sx={{ width: "5rem", height: "5rem" }}
          src="https://cdn.pixabay.com/photo/2021/12/20/09/44/adult-6882635_1280.jpg"
        ></Avatar>
        <p>codewithtom</p>
      </div>
    </div>
  );
};

export default StoryCircle;

================
File: src/components/Post/PostCard.jsx
================
import {
  Avatar,
  Card,
  CardActions,
  CardContent,
  CardHeader,
  CardMedia,
  IconButton,
  Typography,
} from "@mui/material";
import { red } from "@mui/material/colors";
import MoreVertIcon from "@mui/icons-material/MoreVert";
import FavoriteIcon from "@mui/icons-material/Favorite";
import FavoriteBorderIcon from "@mui/icons-material/FavoriteBorder";
import ShareIcon from "@mui/icons-material/Share";
import ChatBubbleIcon from "@mui/icons-material/ChatBubble";
import ChatBubbleOutlineIcon from '@mui/icons-material/ChatBubbleOutline';
import BookmarkIcon from "@mui/icons-material/Bookmark";
import BookmarkBorderIcon from "@mui/icons-material/BookmarkBorder";
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { createCommentAction } from "../../Redux/Comment/comment.action";
import { isLikedByReqUser } from "../../utils/isLikedByReqUser";
import { isSavedByReqUser } from "../../utils/isSavedByReqUser";
import { likePostAction } from "../../Redux/Post/post.action";
import { getSavedPostsAction, savePostAction } from "../../Redux/User/user.action";

const PostCard = ({ item }) => {
  const dispatch = useDispatch();
  const { post, auth, user } = useSelector((store) => store);
  const [showComments, setShowComments] = useState(false);
  const isSaved = user.savedPosts.data?.some(i => i.id === item.id) || false;

  const handleShowComments = () => {
    setShowComments(!showComments);
  };

  const handleCreateComment = (content) => {
    const reqData = {
      postId: item.id,
      data: {
        content: content,
      },
    };
    dispatch(createCommentAction(reqData));
  };

  const handleLikePost = () => {
    dispatch(likePostAction(item.id));
  };

  const handleSavePost = () => {
    dispatch(savePostAction(item.id));
  };

  return (
    <Card>
      <CardHeader
        avatar={
          <Avatar sx={{ bgcolor: red[500] }} aria-label="recipe">
            {item.user.firstName.charAt(0).toUpperCase() +
              item.user.lastName.charAt(0).toUpperCase()}
          </Avatar>
        }
        action={
          <IconButton aria-label="settings">
            <MoreVertIcon />
          </IconButton>
        }
        title={
          <div className="flex items-center">
            <span>{item.user.firstName + " " + item.user.lastName}</span>
            <Typography
              variant="body2"
              color="text.secondary"
              sx={{ marginLeft: 1 }}
            >
              {new Date(item.createdAt).toLocaleString()}
            </Typography>
          </div>
        }
        subheader={
          <Typography variant="body2" color="text.secondary">
            {item.user.email.toLowerCase()}
          </Typography>
        }
      />
      <CardMedia component="img" height="100" image={item.image} alt="" />
      <CardContent>
        <Typography variant="body2" sx={{ color: "text.secondary" }}>
          {item.caption}
        </Typography>
      </CardContent>

      <CardActions className="flex justify-between" disableSpacing>
        <div className="flex items-center">
          <IconButton onClick={handleLikePost}>
            {isLikedByReqUser(user.profile.data.id, item) ? (
              <FavoriteIcon />
            ) : (
              <FavoriteBorderIcon />
            )}
          </IconButton>
          {/* <IconButton>
            <ShareIcon />
          </IconButton> */}
          <IconButton onClick={handleShowComments}>
            {showComments ? (
              <ChatBubbleIcon />
            ) : (
              <ChatBubbleOutlineIcon />
            )}
          </IconButton>
        </div>
        <div>
          <IconButton onClick={handleSavePost}>
            {isSaved ? (
              <BookmarkIcon />
            ) : (
              <BookmarkBorderIcon />
            )}
          </IconButton>
        </div>
      </CardActions>

      <Typography variant="body2" sx={{ marginLeft: 2, marginBottom: 1 }}>
        {item.liked.length} {item.liked.length === 1 ? "Like" : "Likes"}
      </Typography>

      {showComments && (
        <section>
          <div className="flex items-center space-x-5 mx-3 my-5">
            <Avatar sx={{}} />
            <input
              onKeyDown={(e) => {
                if (e.key === "Enter") {
                  handleCreateComment(e.target.value);
                  e.target.value = "";
                }
              }}
              className="w-full outline-none bg-transparent border border-[#3b4054] rounded-full px-5 py-2"
              type="text"
              placeholder="Write your comment"
            />
          </div>
          <div className="mx-3 space-y-2 my-5 text-xs">
            {item.comments?.map((comment) => (
              <div className="flex items-center space-x-5" key={comment.id}>
                <Avatar
                  sx={{ height: "2rem", width: "2rem", fontSize: ".8rem" }}
                >
                  {comment.user.firstName.charAt(0).toUpperCase()}
                </Avatar>
                <p>{comment.content}</p>
              </div>
            ))}
          </div>
        </section>
      )}
    </Card>
  );
};

export default PostCard;

================
File: src/components/ProtectedRoute.jsx
================
// src/components/ProtectedRoute.jsx
import React from "react";
import { Navigate, useLocation } from "react-router-dom";
import { useSelector } from "react-redux";

const ProtectedRoute = ({ children }) => {
  const auth = useSelector((store) => store.auth);
  const user = useSelector((store) => store.user);
  const location = useLocation();

  if (!user.profile) {
    console.log(auth, user);
    // Redirect to login with the return URL
    return <Navigate to="/login" replace state={{ from: location }} />;
  }

  return children;
};

export default ProtectedRoute;

================
File: src/components/Reels/CreateReelsForm.jsx
================
import React from "react";

const CreateReelsForm = () => {
    return (
        <div>CreateReelsForm</div>
    )
}

export default CreateReelsForm

================
File: src/components/Reels/Reels.jsx
================
import React from "react";

const Reels = () => {
    return (
        <div>Reels</div>
    )
}

export default Reels

================
File: src/components/Reels/UserReelCard.jsx
================
import React from 'react'

const UserReelCard = () => {
  return (
    <div className='w-[15rem] px-2'>
        <video controls className='w-full h-full' src='https://videos.pexels.com/video-files/6421077/6421077-uhd_1440_2732_30fps.mp4' />
    </div>
  )
}

export default UserReelCard

================
File: src/components/ResetPassword.jsx
================
import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useLocation } from 'react-router-dom';
import { resetPassword } from '../Redux/Auth/auth.action';

const ResetPassword = () => {
    const [newPassword, setNewPassword] = useState('');
    const dispatch = useDispatch();
    const auth = useSelector(state => state.auth);
    const query = new URLSearchParams(useLocation().search);
    const token = query.get('token');

    const handleSubmit = (e) => {
        e.preventDefault();
        dispatch(resetPassword(token, newPassword));
    }

    return (
        <div className="reset-password-container">
            <h2>Reset Password</h2>
            <form onSubmit={handleSubmit}>
                <div>
                    <label>New Password:</label>
                    <input 
                        type="password" 
                        value={newPassword} 
                        onChange={(e) => setNewPassword(e.target.value)} 
                        required 
                    />
                </div>
                <button type="submit">Reset Password</button>
            </form>
            {auth.loading && <p>Loading...</p>}
            {auth.error && <p className="error">{auth.error}</p>}
            {auth.message && <p className="success">{auth.message}</p>}
        </div>
    );
}

export default ResetPassword;

================
File: src/components/SearchUser/SearchUser.jsx
================
import { Avatar, Card, IconButton } from "@mui/material";
import React, { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { createChat } from "../../Redux/Message/message.action";
import { searchUser } from "../../Redux/User/user.action";
import { useNavigate } from "react-router-dom";
import ChatIcon from "@mui/icons-material/Chat";

const SearchUser = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { user } = useSelector((store) => store);
  const [username, setUsername] = useState("");

  const handleSearchUser = (e) => {
    const query = e.target.value;
    setUsername(query);
    if (query.trim()) {
      dispatch(searchUser(query));
    }
  };

  const handleNavigateToProfile = (userId) => {
    navigate(`/profile/${userId}`);
    setUsername("");
  };

  const handleCreateChat = (userId) => {
    dispatch(createChat({ userId }));
    setUsername("");
  };

  return (
    <div className="relative py-5">
      <input
        className="bg-transparent border border-[#3b4054] outline-none w-full px-5 py-3 rounded-full"
        placeholder="Search user"
        onChange={handleSearchUser}
        type="text"
        value={username}
      />

      {username && user.search.results?.length > 0 && (
        <div className="absolute z-10 top-[4.5rem] w-full bg-white shadow-lg rounded-lg overflow-hidden">
          {user.search.results.map((item) => (
            <Card key={item.id} className="relative border-b last:border-b-0 hover:bg-gray-50">
              <div
                onClick={() => handleNavigateToProfile(item.id)}
                className="flex items-center p-3 cursor-pointer"
              >
                <Avatar
                  src={
                    item.avatarUrl ||
                    "https://cdn-icons-png.flaticon.com/512/14996/14996907.png"
                  }
                  className="mr-3"
                />
                <div>
                  <div className="font-medium">{item.firstName} {item.lastName}</div>
                  <div className="text-sm text-gray-500">{item.email.toLowerCase()}</div>
                </div>
              </div>
              <IconButton
                onClick={(e) => {
                  e.stopPropagation();
                  handleCreateChat(item.id);
                }}
                aria-label="start chat"
                className="!absolute right-4 top-3"
              >
                <ChatIcon />
              </IconButton>
            </Card>
          ))}
        </div>
      )}

      {username && user.search.results?.length === 0 && (
        <div className="absolute z-10 top-[4.5rem] w-full bg-white shadow-lg rounded-lg p-4">
          <p className="text-center text-gray-500">No users found.</p>
        </div>
      )}
    </div>
  );
};

export default SearchUser;

================
File: src/components/SideBar/SideBar.jsx
================
// src/components/SideBar/SideBar.jsx
import React from "react";
import { navigationMenu } from "./SideBarNavigation";
import { Avatar, Button, Card, Divider, Menu, MenuItem } from "@mui/material";
import MoreVertIcon from "@mui/icons-material/MoreVert";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate, Link } from "react-router-dom"; // Import Link if needed
import { resetAuthAction } from "../../Redux/Auth/auth.action";

const SideBar = () => {
  const dispatch = useDispatch();
  const auth = useSelector(store => store.auth);
  const user = useSelector(store => store.user);
  const navigate = useNavigate();
  const [anchorEl, setAnchorEl] = React.useState(null);
  const open = Boolean(anchorEl);
  
  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };
  
  const handleClose = () => {
    setAnchorEl(null);
  };
  
  const handleNavigate = (item) => {
    if (item.title === "Profile") {
      navigate(`/profile/${user.profile.data?.id}`);
    } else {
      navigate(item.path);
    }
  };
  
  const handleLogout = () => {
    dispatch(resetAuthAction());
    navigate("/login");
  };
  
  return (
    <Card className="card h-screen flex flex-col justify-between py-5">
      <div className="space-y-8 pl-5">
        <div className="">
          <span className="logo font-bold text-xl">Tom Social</span>
        </div>

        <div className="space-y-8">
          {navigationMenu.map((item) => (
            <div
              key={item.title} // Add unique key
              onClick={() => handleNavigate(item)}
              className="cursor-pointer flex space-x-3 items-center"
            >
              {item.icon}
              <p className="text-xl">{item.title}</p>
            </div>
          ))}
        </div>
      </div>
      <div>
        <Divider />
        <div className="pl-5 flex items-center justify-between pt-5">
          <div className="flex items-center space-x-3">
            <Avatar src="https://cdn-icons-png.flaticon.com/512/14996/14996907.png" />
            <div>
              <p className="font-bold">
                {user.profile.data?.firstName + " " + user.profile.data?.lastName}
              </p>
              <p className="opacity-70">{user.profile.data?.email.toLowerCase()}</p>
            </div>
          </div>
          <div>
            <Button
              id="basic-button"
              aria-controls={open ? "basic-menu" : undefined}
              aria-haspopup="true"
              aria-expanded={open ? "true" : undefined}
              onClick={handleClick}
            >
              <MoreVertIcon />
            </Button>
            <Menu
              id="basic-menu"
              anchorEl={anchorEl}
              open={open}
              onClose={handleClose}
              MenuListProps={{
                "aria-labelledby": "basic-button",
              }}
            >
              <MenuItem
                onClick={() => {
                  handleClose();
                  handleLogout();
                }}
              >
                Logout
              </MenuItem>
            </Menu>
          </div>
        </div>
      </div>
    </Card>
  );
};

export default SideBar;

================
File: src/components/SideBar/SideBarNavigation.js
================
import HomeIcon from '@mui/icons-material/Home';
import ExploreIcon from '@mui/icons-material/Explore';
import ControlPointIcon from '@mui/icons-material/ControlPoint';
import NotificationsIcon from '@mui/icons-material/Notifications';
import MessageIcon from '@mui/icons-material/Message';
import ListAltIcon from '@mui/icons-material/ListAlt';
import GroupIcon from '@mui/icons-material/Group';
import AccountCircleIcon from '@mui/icons-material/AccountCircle';


export const navigationMenu = [
    {
        title: "Home",
        icon: <HomeIcon />,
        path: "/"
    },
    {
        title: "Reels",
        icon: <ExploreIcon />,
        path: "/reels"
    },
    {
        title: "Create Reels",
        icon: <ControlPointIcon />,
        path: "/create-reels"
    },
    {
        title: "Notifications",
        icon: <NotificationsIcon />,
        path: "/"
    },
    {
        title: "Message",
        icon: <MessageIcon />,
        path: "/message"
    },
    {
        title: "Lists",
        icon: <ListAltIcon />,
        path: "/"
    },
    {
        title: "Communities",
        icon: <GroupIcon />,
        path: "/"
    },
    {
        title: "Profile",
        icon: <AccountCircleIcon />,
        path: "/profile"
    },
]

================
File: src/config/api.js
================
import axios from "axios";

export const API_BASE_URL = "http://localhost:8080";

export const api = axios.create({
    baseURL: API_BASE_URL,
    headers: {
        "Content-Type": "application/json"
    }
});

api.interceptors.request.use(
    (config) => {
        const token = localStorage.getItem("jwt");
        if (token) {
            config.headers["Authorization"] = `Bearer ${token}`;
        } else {
            delete config.headers["Authorization"];
        }
        return config;
    },
    (error) => {
        return Promise.reject(error);
    }
);

================
File: src/index.css
================
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  /* Dark mode */
  /* background: #212534;
  color: rgb(88, 199, 250) */
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.hideScrollBar::-webkit-scrollbar {
  display: none;
}

@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { Provider } from 'react-redux';
import { store } from './Redux/store';
import { BrowserRouter } from 'react-router-dom';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <Provider store={store}>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </Provider>

  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/pages/Authentication/Authentication.jsx
================
import { Card, Grid } from "@mui/material";
import React from "react";
import { useSelector } from "react-redux";

const Authentication = ({ children }) => {
  const auth = useSelector(store => store.auth);

  return (
    <div>
      <Grid container>
        <Grid className="h-screen overflow-hidden" item xs={7}>
          <img
            className="h-full w-full"
            src="https://img.freepik.com/free-photo/beautiful-rendering-dating-app-concept_23-2149316420.jpg?w=900"
            alt="Authentication Background"
          />
        </Grid>
        <Grid item xs={5}>
          <div className="px-20 flex flex-col justify-center h-full">
            <Card className="card p-8">
              <div className="flex flex-col items-center mb-5 space-y-1">
                <h1 className="logo text-center">Tom Social</h1>
                <p className="text-center text-sm w-[70%]">
                  Connecting Lives, Sharing Stories: Your Social World, Your Way
                </p>
              </div>

              {children}
            </Card>
          </div>
        </Grid>
      </Grid>
    </div>
  );
};

export default Authentication;

================
File: src/pages/Authentication/Login.jsx
================
import { Button, TextField } from "@mui/material";
import { ErrorMessage, Field, Form, Formik } from "formik";
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import * as Yup from "yup";
import { loginUserAction, resetAuthAction } from "../../Redux/Auth/auth.action";
import { useNavigate } from "react-router-dom";

const initialValues = { email: "", password: "" };
const validationSchema = Yup.object({
  email: Yup.string().email("Invalid email").required("Email is required"),
  password: Yup.string().required("Password is required"),
});

const Login = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const auth = useSelector(store => store.auth);
  const user = useSelector(store => store.user);
  const [errorMessage, setErrorMessage] = useState("");

  useEffect(() => {
    if (auth.error) {
      dispatch(resetAuthAction());
    }
  }, [dispatch]);

  useEffect(() => {
    if (auth) {
      const message = auth.error?.response?.data?.message || auth.error;
      if (message && message !== "invalid token ...") {
        setErrorMessage(message);
      }
    }
    if (auth.jwt && user.profile.data) {
      navigate("/"); 
    }
  }, [auth, user, navigate]);

  const handleLogin = (values) => {
    console.log("handle submit", values);
    dispatch(loginUserAction({ data: values }));
  };

  return (
    <>
      <Formik
        onSubmit={handleLogin}
        validationSchema={validationSchema}
        initialValues={initialValues}
      >
        <Form className="space-y-5">
          <div className="space-y-5">
            <div>
              <Field
                as={TextField}
                name="email"
                placeholder="Email"
                type="email"
                variant="outlined"
                fullWidth
              />
              <ErrorMessage
                name="email"
                component={"div"}
                className="text-red-500"
              />
            </div>
            <div>
              <Field
                as={TextField}
                name="password"
                placeholder="Password"
                type="password"
                variant="outlined"
                fullWidth
              />
              <ErrorMessage
                name="password"
                component={"div"}
                className="text-red-500"
              />
            </div>
          </div>
          <Button
            sx={{ padding: ".8rem 0rem" }}
            fullWidth
            type="submit"
            variant="contained"
            color="primary"
          >
            Login
          </Button>
          {errorMessage && (
            <div className="text-red-500 mt-2">{errorMessage}</div>
          )}
        </Form>
      </Formik>
      <div className="flex gap-2 items-center justify-center pt-5">
        <p>If you don't have an account?</p>
        <Button
          onClick={() => {
            dispatch(resetAuthAction());
            navigate("/register");
          }}
        >
          Register
        </Button>
      </div>
    </>
  );
};

export default Login;

================
File: src/pages/Authentication/Register.jsx
================
import {
  Button,
  FormControlLabel,
  Radio,
  RadioGroup,
  TextField,
} from "@mui/material";
import { ErrorMessage, Field, Form, Formik } from "formik";
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import * as Yup from "yup";
import {
  registerUserAction,
  resetAuthAction,
} from "../../Redux/Auth/auth.action";
import { useNavigate } from "react-router-dom";

const initialValues = {
  firstName: "",
  lastName: "",
  email: "",
  password: "",
  gender: "", 
};

const validationSchema = Yup.object({
  firstName: Yup.string().required("First Name is required"),
  lastName: Yup.string().required("Last Name is required"),
  email: Yup.string().email("Invalid email").required("Email is required"),
  password: Yup.string()
    .min(6, "Password must be at least 6 characters")
    .required("Password is required"),
  gender: Yup.string().required("Gender is required"),
});

const Register = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const auth = useSelector((store) => store.auth);
  const [errorMessage, setErrorMessage] = useState("");

  useEffect(() => {
    if (auth.error) {
      dispatch(resetAuthAction());
    }
  }, [dispatch, auth.error]);

  useEffect(() => {
    if (auth) {
      const message = auth.error?.response?.data?.message || auth.error;
      if (message && message !== "invalid token ...") {
        setErrorMessage(message);
      }
    }
  }, [auth]);

  const handleSubmit = (values) => {
    console.log("handle submit", values);
    dispatch(registerUserAction({ data: values }));
  };

  return (
    <>
      <Formik
        onSubmit={handleSubmit}
        validationSchema={validationSchema}
        initialValues={initialValues}
      >
        {({ values, handleChange }) => (
          <Form className="space-y-5">
            <div className="space-y-5">
              <div>
                <Field
                  as={TextField}
                  name="firstName"
                  placeholder="First Name"
                  type="text"
                  variant="outlined"
                  fullWidth
                />
                <ErrorMessage
                  name="firstName"
                  component={"div"}
                  className="text-red-500"
                />
              </div>
              <div>
                <Field
                  as={TextField}
                  name="lastName"
                  placeholder="Last Name"
                  type="text"
                  variant="outlined"
                  fullWidth
                />
                <ErrorMessage
                  name="lastName"
                  component={"div"}
                  className="text-red-500"
                />
              </div>
              <div>
                <Field
                  as={TextField}
                  name="email"
                  placeholder="Email"
                  type="email"
                  variant="outlined"
                  fullWidth
                />
                <ErrorMessage
                  name="email"
                  component={"div"}
                  className="text-red-500"
                />
              </div>
              <div>
                <Field
                  as={TextField}
                  name="password"
                  placeholder="Password"
                  type="password"
                  variant="outlined"
                  fullWidth
                />
                <ErrorMessage
                  name="password"
                  component={"div"}
                  className="text-red-500"
                />
              </div>
              <div>
                <RadioGroup
                  row
                  aria-label="gender"
                  name="gender"
                  value={values.gender}
                  onChange={handleChange}
                >
                  <FormControlLabel
                    value="female"
                    control={<Radio />}
                    label="Female"
                  />
                  <FormControlLabel
                    value="male"
                    control={<Radio />}
                    label="Male"
                  />
                </RadioGroup>
                <ErrorMessage
                  name="gender"
                  component={"div"}
                  className="text-red-500"
                />
              </div>
            </div>
            <Button
              sx={{ padding: ".8rem 0rem" }}
              fullWidth
              type="submit"
              variant="contained"
              color="primary"
            >
              Register
            </Button>
            {errorMessage && (
              <div className="text-red-500 mt-2">{errorMessage}</div>
            )}
          </Form>
        )}
      </Formik>
      <div className="flex gap-2 items-center justify-center pt-5">
        <p>If you already have an account?</p>
        <Button
          onClick={() => {
            dispatch(resetAuthAction());
            navigate("/login");
          }}
        >
          Login
        </Button>
      </div>
    </>
  );
};

export default Register;

================
File: src/pages/HomePage/HomePage.jsx
================
// src/pages/HomePage/HomePage.jsx
import { Grid } from "@mui/material";
import React from "react";
import SideBar from "../../components/SideBar/SideBar";
import MiddlePart from "../../components/MiddlePart/MiddlePart";
import Reels from "../../components/Reels/Reels";
import CreateReelsForm from "../../components/Reels/CreateReelsForm";
import Profile from "../Profile/Profile";
import HomeRight from "../../components/HomeRight/HomeRight";
import { Outlet, useLocation } from "react-router-dom";
import { useSelector } from "react-redux";

const HomePage = () => {
  const location = useLocation();
  const auth = useSelector((store) => store.auth);

  return (
    <div className="px-20">
      <Grid container spacing={0}>
        <Grid item xs={0} lg={3}>
          <div className="sticky top-0">
            <SideBar />
          </div>
        </Grid>
        <Grid
          lg={location.pathname.startsWith("/profile") ? 9 : 6} // Adjust grid size based on route
          item
          className="px-5 flex justify-center"
          xs={12}
        >
          <Outlet /> {location.pathname === "/" && <MiddlePart />}
        </Grid>

        {location.pathname === "/" && (
          <Grid item lg={3} className="relative">
            <div className="sticky top-0 w-full">
              <HomeRight />
            </div>
          </Grid>
        )}
      </Grid>
    </div>
  );
};

export default HomePage;

================
File: src/pages/Message/ChatMessage.jsx
================
import React from "react";
import { useSelector } from "react-redux";

const ChatMessage = ({ item }) => {
  const auth = useSelector(store => store.auth);
  const user = useSelector(store => store.user);
  const isReqUserMessage = user.profile.data?.id === item.user?.id;
  return (
    <div
      className={`flex ${isReqUserMessage ? "justify-end" : "justify-start"} text-white`}
    >
      <div
        className={`p-1 ${
          item.image ? "px-3 py-3 rounded-md" : "px-5 rounded-full"
        } bg-[#191c29]`}
      >
        {item.image && (
          <img
            className="w-[12rem] h-[17rem] object-cover rounded-md"
            alt=""
            src={item.image}
          />
        )}
        <p className={`${true ? "py-2" : "py-1"}`}>{item.content}</p>
        <p>{item.timestamp}</p>
      </div>
    </div>
  );
};

export default ChatMessage;

================
File: src/pages/Message/Message.jsx
================
import {
  Avatar,
  Backdrop,
  Button,
  CircularProgress,
  Grid,
  IconButton,
} from "@mui/material";
import React, { useEffect, useRef, useState } from "react";
import WestIcon from "@mui/icons-material/West";
import CallIcon from "@mui/icons-material/Call";
import VideocamIcon from "@mui/icons-material/Videocam";
import AddPhotoAlternateIcon from "@mui/icons-material/AddPhotoAlternate";
import SearchUser from "../../components/SearchUser/SearchUser";
import UserChatCard from "./UserChatCard";
import ChatMessage from "./ChatMessage";
import { useDispatch, useSelector } from "react-redux";
import { createMessage, getAllChats } from "../../Redux/Message/message.action";
import ChatBubbleOutlineIcon from "@mui/icons-material/ChatBubbleOutline";
import { uploadToCloudinary } from "../../utils/uploadToCloudinary";
import SockJS from "sockjs-client";
import Stom from "stompjs";

const Message = () => {
  const dispatch = useDispatch();
  const { message, auth, user } = useSelector((store) => store);
  const [currentChat, setCurrentChat] = useState();
  const [messages, setMessages] = useState([]);
  const [selectedImage, setSelectedImage] = useState();
  const [partner, setPartner] = useState({});
  const [loading, setLoading] = useState(false);
  const chatContainerRef = useRef(null);

  useEffect(() => {
    dispatch(getAllChats());
  }, []);

  useEffect(() => {
    if (currentChat) {
      setPartner(
        user.profile.data?.id === currentChat.users[0]?.id
          ? currentChat.users[1]
          : currentChat.users[0]
      );
    }
  }, [currentChat]);

  console.log("chats ----- ", message.chats);

  const handleSelectedImage = async (e) => {
    setLoading(true);
    console.log("handle selected image");
    const imgUrl = await uploadToCloudinary(e.target.files[0], "image");
    setSelectedImage(imgUrl);
    setLoading(false);
  };

  const handleCreateMessage = (value) => {
    const message = {
      chatId: currentChat?.id,
      content: value,
      image: selectedImage,
    };
    dispatch(createMessage({ message, sendMessageToServer }));
  };

  const [stompClient, setStompClient] = useState(null);

  useEffect(() => {
    const sock = new SockJS("http://localhost:8080/ws");
    const stomp = Stom.over(sock);
    setStompClient(stomp);

    stomp.connect({}, onConnect, onErr);
  }, []);

  const onConnect = () => {
    console.log("web socket connected...");
  };

  const onErr = (err) => {
    console.log("web socket error ", err);
  };

  useEffect(() => {
    if (stompClient && user.profile.data && currentChat) {
      const subscription = stompClient.subscribe(
        `/user/${currentChat.id}/private`,
        onMessageReceive
      );
    }
  });

  const sendMessageToServer = (newMessage) => {
    if (stompClient && newMessage) {
      stompClient.send(
        `/app/chat/${currentChat?.id.toString()}`,
        {},
        JSON.stringify(newMessage)
      );
    }
  };

  const onMessageReceive = (payload) => {
    const receivedMessage = JSON.parse(payload.body);
    console.log("message received from web socket ", receivedMessage);

    setMessages([...messages, receivedMessage]);
  };

  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop =
        chatContainerRef.current.scrollHeight;
    }
  }, [messages]);

  return (
    <div>
      <Grid container className="h-screen overflow-y-hidden">
        <Grid className="px-5" item xs={3}>
          <div className="flex h-full justify-between space-x-2">
            <div className="w-full">
              <div className="flex space-x-4 items-center py-5">
                <WestIcon />
                <h1 className="text-xl font-bold">Home</h1>
              </div>
              <div className="h-[83vh]">
                <div className="">
                  <SearchUser />
                </div>

                <div className="h-full space-y-4 mt-5 overflow-y-scroll hideScrollBar">
                  {message.chats.map((item) => (
                    <div
                      onClick={() => {
                        setCurrentChat(item);
                        setMessages(item.messages);
                      }}
                    >
                      <UserChatCard key={item.id} chat={item} />
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </Grid>
        <Grid className="h-full " item xs={9}>
          {currentChat ? (
            <div>
              <div className="flex justify-between items-center border-l p-5">
                <div className="flex items-center space-x-3">
                  <Avatar src="https://cdn-icons-png.flaticon.com/512/14996/14996907.png" />
                  <p>{partner.firstName + " " + partner.lastName}</p>
                </div>

                <div className="flex space-x-3">
                  <IconButton>
                    <CallIcon />
                  </IconButton>
                  <IconButton>
                    <VideocamIcon />
                  </IconButton>
                </div>
              </div>

              <div ref={chatContainerRef} className="hideScrollBar overflow-y-scroll h-[82vh] px-2 space-y-5 py-5">
                {messages.map((item) => (
                  <ChatMessage item={item} />
                ))}
              </div>
              <div className="sticky bottom-0 border-l">
                {selectedImage && (
                  <img
                    className="w-[5rem] h-[5rem] object-cover px-2"
                    src={selectedImage}
                    alt=""
                  />
                )}
                <div className="py-5 flex items-center justify-center space-x-5">
                  <input
                    onKeyDown={(e) => {
                      if (e.key === "Enter" && e.target.value) {
                        handleCreateMessage(e.target.value);
                        setSelectedImage("");
                      }
                    }}
                    className="bg-transparent border border-[#3b4054] rounded-full w-[90%] py-3 px-5"
                    placeholder="Type message..."
                    type="text"
                  />

                  <div>
                    <input
                      type="file"
                      accept="image/*"
                      onChange={handleSelectedImage}
                      className="hidden"
                      id="image-input"
                    />
                    <Button>
                      <label htmlFor="image-input">
                        <AddPhotoAlternateIcon className="cursor-pointer " />
                      </label>
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className="h-full space-y-5 flex flex-col justify-center items-center">
              <ChatBubbleOutlineIcon sx={{ fontSize: "15rem" }} />
              <p className="text-xl font-semibold">No Chat Selected</p>
            </div>
          )}
        </Grid>
      </Grid>

      <Backdrop
        sx={(theme) => ({ color: "#fff", zIndex: theme.zIndex.drawer + 1 })}
        open={loading}
      >
        <CircularProgress color="inherit" />
      </Backdrop>
    </div>
  );
};

export default Message;

================
File: src/pages/Message/UserChatCard.jsx
================
import { Avatar, Card, CardHeader, IconButton } from "@mui/material";
import React from "react";
import MoreHorizIcon from "@mui/icons-material/MoreHoriz";
import { useSelector } from "react-redux";

const UserChatCard = ({ chat }) => {
  const auth = useSelector(store => store.auth);
  const thisUser = useSelector(store => store.user);
  
  const users = chat.users;
  const user = thisUser.profile.data?.id === users[0]?.id ? users[1] : users[0];
  
  return (
    <Card>
      <CardHeader
        avatar={
          <Avatar
            sx={{
              width: "3.5rem",
              height: "3.5rem",
              fontSize: "1.5rem",
              bgcolor: "#191c29",
              color: "rgb(88,199,250)",
            }}
            src="https://cdn-icons-png.flaticon.com/512/14996/14996907.png"
          />
        }
        action={
          <IconButton>
            <MoreHorizIcon />
          </IconButton>
        }
        title={user.firstName + " " + user.lastName}
        subheader={"new message"}
      ></CardHeader>
    </Card>
  );
};

export default UserChatCard;

================
File: src/pages/Profile/Profile.jsx
================
import { Avatar, Box, Button, Card, Tab, Tabs } from "@mui/material";
import React, { useEffect, useState } from "react";
import PostCard from "../../components/Post/PostCard";
import UserReelCard from "../../components/Reels/UserReelCard";
import { useDispatch, useSelector } from "react-redux";
import ProfileModal from "./ProfileModal";
import { getUsersPostAction } from "../../Redux/Post/post.action";
import {
  fetchUserProfileAction,
  getSavedPostsAction,
} from "../../Redux/User/user.action";
import { useParams } from "react-router-dom";

const tabs = [
  { value: "post", name: "Post" },
  { value: "reels", name: "Reels" },
  { value: "saved", name: "Saved" },
  { value: "repost", name: "Repost" },
];
const reels = [1, 1, 1, 1];
const repost = [1, 1, 1, 1];
const Profile = () => {
  const dispatch = useDispatch();
  const { id } = useParams();
  const { auth, post, user } = useSelector((store) => store);
  const [value, setValue] = React.useState("post");
  const [open, setOpen] = useState(false);
  const handleOpenProfileModal = () => setOpen(true);
  const handleClose = () => setOpen(false);
  const savedPost = user.savedPosts.data;

  const handleChange = (event, newValue) => {
    setValue(newValue);
  };

  useEffect(() => {
    if (id) {
      dispatch(fetchUserProfileAction(id));
      dispatch(getUsersPostAction(id));
    }
    dispatch(getSavedPostsAction());
  }, [id, dispatch]);

  return (
    <Card className="my-10 w-[70%]">
      <div className="rounded-md">
        <div className="h-[15rem]">
          <img
            className="w-full h-full rounded-t-md object-cover"
            src="https://images.pexels.com/photos/386025/pexels-photo-386025.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
            alt=""
          />
        </div>
        <div className="px-5 flex justify-between items-start mt-5 h-[5rem]">
          <Avatar
            className="transform -translate-y-24"
            sx={{ width: "10rem", height: "10rem" }}
            src="https://scontent.fhan15-1.fna.fbcdn.net/v/t39.30808-6/315367609_5500176540092887_7537861654572062772_n.jpg?_nc_cat=108&ccb=1-7&_nc_sid=a5f93a&_nc_ohc=8GjadgMNc4sQ7kNvgEqInbp&_nc_ht=scontent.fhan15-1.fna&_nc_gid=AUpmJCUyVdczo3o2UtFA5fq&oh=00_AYAbJOTDMKl1L6wYyv-EgZY6dq5U1QV1rdw0zOBkbO_caA&oe=6702DF96"
          />

          {true ? (
            <Button
              onClick={handleOpenProfileModal}
              sx={{ borderRadius: "20px" }}
              variant="outlined"
            >
              Edit Profile
            </Button>
          ) : (
            <Button sx={{ borderRadius: "20px" }} variant="outlined">
              Follow
            </Button>
          )}
        </div>
        <div className="p-5">
          <div>
            <h1 className="py-1 font-bold text-xl">
              {user.profile.data?.firstName + " " + user.profile.data?.lastName}
            </h1>
            <p>{user.profile.data?.user?.email.toLowerCase()}</p>
          </div>
          <div className="flex gap-2 items-center py-3">
            <span>{post.userPosts.length} posts</span>
            <span>{user.profile.data?.followersCount} followers</span>
            <span>{user.profile.data?.followingsCount} followings</span>
          </div>

          <div>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit.</p>
          </div>
        </div>
        <section>
          <Box sx={{ width: "100%", borderBottom: 1, borderColor: "divider" }}>
            <Tabs
              value={value}
              onChange={handleChange}
              aria-label="wrapped label tabs example"
            >
              {tabs.map((item) => (
                <Tab value={item.value} label={item.name} wrapped />
              ))}
            </Tabs>
          </Box>
          <div className="flex justify-center">
            {value === "post" ? (
              <div className="space-y-5 w-[70%] my-10">
                {post.userPosts.map((item) => (
                  <div className="border border-slate-100 rounded-md">
                    <PostCard item={item} />
                  </div>
                ))}
              </div>
            ) : value === "reels" ? (
              <div className="flex justify-center flex-wrap gap-2 my-10">
                {reels.map((item) => (
                  <div>
                    <UserReelCard />
                  </div>
                ))}
              </div>
            ) : value === "saved" ? (
              <div className="space-y-5 w-[70%] my-10">
                {savedPost.length > 0 ? (
                  savedPost.map((post) => (
                    <div
                      className="border border-slate-100 rounded-md"
                      key={post.id}
                    >
                      <PostCard item={post} />
                    </div>
                  ))
                ) : (
                  <p>No saved posts.</p>
                )}
              </div>
            ) : value === "repost" ? (
              <div className="space-y-5 w-[70%] my-10">
                {repost.map((item) => (
                  <div className="border border-slate-100 rounded-md">
                    <PostCard />
                  </div>
                ))}
              </div>
            ) : (
              ""
            )}
          </div>
        </section>
      </div>

      <section>
        <ProfileModal open={open} handleClose={handleClose} />
      </section>
    </Card>
  );
};

export default Profile;

================
File: src/pages/Profile/ProfileModal.jsx
================
import * as React from "react";
import Box from "@mui/material/Box";
import Button from "@mui/material/Button";
import Typography from "@mui/material/Typography";
import Modal from "@mui/material/Modal";
import { useDispatch, useSelector } from "react-redux";
import { useFormik } from "formik";
import { Avatar, IconButton, TextField } from "@mui/material";
import CloseIcon from "@mui/icons-material/Close";
import { updateProfileAction } from "../../Redux/User/user.action";

const style = {
  position: "absolute",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  width: 600,
  bgcolor: "background.paper",
  boxShadow: 24,
  p: 2,
  outline: "none",
  overFlow: "scroll-y",
  borderRadius: 3,
};

export default function ProfileModal({ open, handleClose }) {
  const dispatch = useDispatch();
  const { auth, post, user } = useSelector((store) => store);

  const handleSubmit = (values) => {
    console.log("values ", values);
  };
  const formik = useFormik({
    initialValues: {
      firstName: user.profile.data.firstName,
      lastName: user.profile.data.lastName
    },
    onSubmit: (values) => {
      console.log("values ", values);
      dispatch(updateProfileAction(values));
    },
  });

  return (
    <div>
      <Modal
        open={open}
        onClose={handleClose}
        aria-labelledby="modal-modal-title"
        aria-describedby="modal-modal-description"
      >
        <Box sx={style}>
          <form onSubmit={formik.handleSubmit}>
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <IconButton onClick={handleClose}>
                  <CloseIcon />
                </IconButton>
                <p>Edit Profile</p>
              </div>
              <Button type="submit">Save</Button>
            </div>
            <div>
              <div className="h-[15rem]">
                <img
                  className="w-full h-full rounded-t-md"
                  src="https://images.pexels.com/photos/386025/pexels-photo-386025.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
                  alt=""
                />
              </div>
              <div className="pl-5">
                <Avatar
                  className="transform -translate-y-24"
                  sx={{ width: "10rem", height: "10rem" }}
                  src="https://scontent.fhan15-1.fna.fbcdn.net/v/t39.30808-6/315367609_5500176540092887_7537861654572062772_n.jpg?_nc_cat=108&ccb=1-7&_nc_sid=a5f93a&_nc_ohc=8GjadgMNc4sQ7kNvgEqInbp&_nc_ht=scontent.fhan15-1.fna&_nc_gid=AUpmJCUyVdczo3o2UtFA5fq&oh=00_AYAbJOTDMKl1L6wYyv-EgZY6dq5U1QV1rdw0zOBkbO_caA&oe=6702DF96"
                />
              </div>
            </div>
            <div className="space-y-3">
              <TextField
                fullWidth
                id="firstName"
                name="firstName"
                label="First Name"
                value={formik.values.firstName}
                onChange={formik.handleChange}
              />
              <TextField
                fullWidth
                id="lastName"
                name="lastName"
                label="Last Name"
                value={formik.values.lastName}
                onChange={formik.handleChange}
              />
            </div>
          </form>
        </Box>
      </Modal>
    </div>
  );
}

================
File: src/Redux/Auth/auth.action.js
================
import axios from "axios"
import { api, API_BASE_URL } from "../../config/api"
import { FORGOT_PASSWORD_FAILURE, FORGOT_PASSWORD_REQUEST, FORGOT_PASSWORD_SUCCESS, LOGIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, REGISTER_FAILURE, REGISTER_REQUEST, REGISTER_SUCCESS, RESET_AUTH, RESET_PASSWORD_FAILURE, RESET_PASSWORD_REQUEST, RESET_PASSWORD_SUCCESS} from "./auth.actionType";

export const loginUserAction = (loginData) => async (dispatch) => {
    dispatch({ type: LOGIN_REQUEST })
    try {
        const { data } = await axios.post(`${API_BASE_URL}/auth/signin`, loginData.data)

        if (data.token) {
            localStorage.setItem('jwt', data.token);

        }

        dispatch({ type: LOGIN_SUCCESS, payload: data.token })
        console.log("login success ---", data);

    } catch (error) {
        console.log("-----", error)
        dispatch({ type: LOGIN_FAILURE, payload: error })
    }
}

export const registerUserAction = (registerData) => async (dispatch) => {
    dispatch({ type: REGISTER_REQUEST })
    try {
        const { data } = await axios.post(`${API_BASE_URL}/auth/signup`, registerData.data)

        if (data.token) {
            localStorage.setItem('jwt', data.token);
        }

        dispatch({ type: REGISTER_SUCCESS, payload: data.token })
        console.log("register success ---", data)

    } catch (error) {
        console.log("-----", error)
        dispatch({ type: REGISTER_FAILURE, payload: error })
    }
}

export const resetAuthAction = () => (dispatch) => {
    localStorage.removeItem('jwt');
    dispatch({ type: RESET_AUTH });
};

export const forgotPassword = (email) => async (dispatch) => {
    dispatch({ type: FORGOT_PASSWORD_REQUEST });
    try {
        const response = await axios.post(`${API_BASE_URL}/auth/forgot-password`, { email });
        dispatch({
            type: FORGOT_PASSWORD_SUCCESS,
            payload: response.data.message
        });
    } catch (error) {
        dispatch({
            type: FORGOT_PASSWORD_FAILURE,
            payload: error.response?.data?.message || 'An error occurred.'
        });
    }
}

export const resetPassword = (token, newPassword) => async (dispatch) => {
    dispatch({ type: RESET_PASSWORD_REQUEST });
    try {
        const response = await axios.post(`${API_BASE_URL}/auth/reset-password`, { token, newPassword });
        dispatch({
            type: RESET_PASSWORD_SUCCESS,
            payload: response.data.message
        });
    } catch (error) {
        dispatch({
            type: RESET_PASSWORD_FAILURE,
            payload: error.response?.data?.message || 'An error occurred.'
        });
    }
}

================
File: src/Redux/Auth/auth.actionType.js
================
export const LOGIN_REQUEST = "LOGIN_REQUEST";
export const LOGIN_SUCCESS = "LOGIN_SUCCESS";
export const LOGIN_FAILURE = "LOGIN_FAILURE";

export const REGISTER_REQUEST = "REGISTER_REQUEST";
export const REGISTER_SUCCESS = "REGISTER_SUCCESS";
export const REGISTER_FAILURE = "REGISTER_FAILURE";

export const RESET_AUTH = "RESET_AUTH";

export const FORGOT_PASSWORD_REQUEST = 'FORGOT_PASSWORD_REQUEST';
export const FORGOT_PASSWORD_SUCCESS = 'FORGOT_PASSWORD_SUCCESS';
export const FORGOT_PASSWORD_FAILURE = 'FORGOT_PASSWORD_FAILURE';

export const RESET_PASSWORD_REQUEST = 'RESET_PASSWORD_REQUEST';
export const RESET_PASSWORD_SUCCESS = 'RESET_PASSWORD_SUCCESS';
export const RESET_PASSWORD_FAILURE = 'RESET_PASSWORD_FAILURE';

================
File: src/Redux/Auth/auth.reducer.js
================
import { error } from "ajv/dist/vocabularies/applicator/dependencies";
import { FORGOT_PASSWORD_FAILURE, FORGOT_PASSWORD_REQUEST, FORGOT_PASSWORD_SUCCESS, GET_PROFILE_FAILURE, GET_PROFILE_REQUEST, GET_PROFILE_SUCCESS, LOGIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, REGISTER_FAILURE, REGISTER_REQUEST, REGISTER_SUCCESS, RESET_AUTH, RESET_PASSWORD_FAILURE, RESET_PASSWORD_REQUEST, RESET_PASSWORD_SUCCESS, SEARCH_USER_FAILURE, SEARCH_USER_REQUEST, SEARCH_USER_SUCCESS, UPDATE_PROFILE_FAILURE, UPDATE_PROFILE_REQUEST, UPDATE_PROFILE_SUCCESS } from "./auth.actionType";
import { searchUser } from "./auth.action";

const initialState = {
    jwt: null,
    error: null,
    loading: false,
    user: null,
    searchUser: [],
}

export const authReducer = (state = initialState, action) => {
    switch (action.type) {
        case LOGIN_REQUEST:
        case REGISTER_REQUEST:
            return { ...state, loading: true, error: null }

        case LOGIN_SUCCESS:
        case REGISTER_SUCCESS:
            return { ...state, jwt: action.payload, loading: false, error: null }

        case LOGIN_FAILURE:
        case REGISTER_FAILURE:
            return { ...state, loading: false, error: action.payload }

        case RESET_AUTH:
            return initialState;

        case FORGOT_PASSWORD_REQUEST:
        case RESET_PASSWORD_REQUEST:
            return {
                ...state,
                loading: true,
                error: null,
                message: null
            }

        case FORGOT_PASSWORD_SUCCESS:
        case RESET_PASSWORD_SUCCESS:
            return {
                ...state,
                loading: false,
                message: action.payload
            }

        case FORGOT_PASSWORD_FAILURE:
        case RESET_PASSWORD_FAILURE:
            return {
                ...state,
                loading: false,
                error: action.payload
            }

        default:
            return state;
    }
}

================
File: src/Redux/Comment/comment.action.js
================
import { api } from "../../config/api"
import { CREATE_COMMENT_FAILURE, CREATE_COMMENT_REQUEST, CREATE_COMMENT_SUCCESS, LIKE_COMMENT_FAILURE, LIKE_COMMENT_REQUEST, LIKE_COMMENT_SUCCESS } from "./comment.actionType"

export const createCommentAction = (reqData) => async (dispatch) => {
    dispatch({ type: CREATE_COMMENT_REQUEST })
    try {
        const { data } = await api.post(`/api/comments/post/${reqData.postId}`, reqData.data)
        dispatch({ type: CREATE_COMMENT_SUCCESS, payload: data })
        console.log("created comment ", data)
    } catch (error) {
        console.log("error ", error)
        dispatch({ type: CREATE_COMMENT_FAILURE, payload: error })
    }
}

export const likeCommentAction = (commentId) => async (dispatch) => {
    dispatch({ type: LIKE_COMMENT_REQUEST })
    try {
        const { data } = await api.post(`/api/comments/like/${commentId}`)
        dispatch({ type: LIKE_COMMENT_SUCCESS, payload: data })
        console.log("liked comment ", data)
    } catch (error) {
        console.log("error ", error)
        dispatch({ type: LIKE_COMMENT_FAILURE, payload: error })
    }
}

================
File: src/Redux/Comment/comment.actionType.js
================
export const CREATE_COMMENT_REQUEST = "CREATE_COMMENT_REQUEST";
export const CREATE_COMMENT_SUCCESS = "CREATE_COMMENT_SUCCESS";
export const CREATE_COMMENT_FAILURE = "CREATE_COMMENT_FAILURE";

export const LIKE_COMMENT_REQUEST = "LIKE_COMMENT_REQUEST";
export const LIKE_COMMENT_SUCCESS = "LIKE_COMMENT_SUCCESS";
export const LIKE_COMMENT_FAILURE = "LIKE_COMMENT_FAILURE";

================
File: src/Redux/Comment/comment.reducer.js
================
// reducer of comment is in post reducer

================
File: src/Redux/Message/message.action.js
================
import { api } from "../../config/api"
import * as actionType from "./message.actionType"


export const createMessage = (reqData) => async (dispatch) => {
    dispatch({ type: actionType.CREATE_MESSAGE_REQUEST })
    try {
        const { data } = await api.post(`/api/messages/chat/${reqData.message.chatId}`, reqData.message);

        reqData.sendMessageToServer(data);

        dispatch({ type: actionType.CREATE_MESSAGE_SUCCESS, payload: data })
        console.log("created message ", data);
    } catch (error) {
        console.log("error creating message ", error)
        dispatch({ type: actionType.CREATE_MESSAGE_FAILURE, payload: error })
    }
}

export const createChat = (reqData) => async (dispatch) => {
    dispatch({ type: actionType.CREATE_CHAT_REQUEST })
    try {
        const { data } = await api.post(`/api/chats`, reqData);
        dispatch({ type: actionType.CREATE_CHAT_SUCCESS, payload: data })
        console.log("created chat ", data);
    } catch (error) {
        console.log("error creating chat ", error)
        dispatch({ type: actionType.CREATE_CHAT_FAILURE, payload: error })
    }
}

export const getAllChats = () => async (dispatch) => {
    dispatch({ type: actionType.GET_ALL_CHAT_REQUEST })
    try {
        const { data } = await api.get(`/api/chats`);
        dispatch({ type: actionType.GET_ALL_CHAT_SUCCESS, payload: data })
        console.log("get chat ", data);
    } catch (error) {
        console.log("error creating chat ", error)
        dispatch({ type: actionType.GET_ALL_CHAT_FAILURE, payload: error })
    }
}

================
File: src/Redux/Message/message.actionType.js
================
export const CREATE_MESSAGE_REQUEST = "CREATE_MESSAGE_REQUEST";
export const CREATE_MESSAGE_SUCCESS = "CREATE_MESSAGE_SUCCESS";
export const CREATE_MESSAGE_FAILURE = "CREATE_MESSAGE_FAILURE";

export const CREATE_CHAT_REQUEST = "CREATE_CHAT_REQUEST";
export const CREATE_CHAT_SUCCESS = "CREATE_CHAT_SUCCESS";
export const CREATE_CHAT_FAILURE = "CREATE_CHAT_FAILURE";

export const GET_ALL_CHAT_REQUEST = "GET_ALL_CHAT_REQUEST";
export const GET_ALL_CHAT_SUCCESS = "GET_ALL_CHAT_SUCCESS";
export const GET_ALL_CHAT_FAILURE = "GET_ALL_CHAT_FAILURE";

================
File: src/Redux/Message/message.reducer.js
================
import * as actionType from './message.actionType'

const initialState = {
    messages: [],
    chats: [],
    loading: false,
    error: null,
    message: null,
}

export const messageReducer = (state = initialState, action) => {
    switch (action.type) {
        case actionType.CREATE_CHAT_REQUEST:
        case actionType.CREATE_MESSAGE_REQUEST:
        case actionType.GET_ALL_CHAT_REQUEST:
            return {
                ...state,
                loading: true,
                error: null
            }


        case actionType.CREATE_MESSAGE_SUCCESS:
            return {
                ...state,
                message: action.payload,
                loading: false,
                error: null
            }

        case actionType.CREATE_CHAT_SUCCESS:
            return {
                ...state,
                chats: [action.payload, ...state.chats],
                loading: false,
                error: null
            }

        case actionType.GET_ALL_CHAT_SUCCESS:
            return {
                ...state,
                chats: action.payload,
                loading: false,
                error: null
            }

        case actionType.CREATE_MESSAGE_FAILURE:
        case actionType.CREATE_CHAT_FAILURE:
        case actionType.GET_ALL_CHAT_FAILURE:
            return {
                ...state,
                loading: false,
                error: action.payload
            }

        default:
            return state;
    }
}

================
File: src/Redux/Post/post.action.js
================
import { api } from "../../config/api"
import { CREATE_POST_FAILURE, CREATE_POST_REQUEST, CREATE_POST_SUCCESS, GET_ALL_POST_FAILURE, GET_ALL_POST_REQUEST, GET_ALL_POST_SUCCESS, GET_USERS_POST_FAILURE, GET_USERS_POST_REQUEST, GET_USERS_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, REPOST_FAILURE, REPOST_REQUEST, REPOST_SUCCESS, SAVE_POST_FAILURE, SAVE_POST_REQUEST, SAVE_POST_SUCCESS } from "./post.actionType"

export const createPostAction = (postData) => async (dispatch) => {
    dispatch({ type: CREATE_POST_REQUEST })
    try {
        const { data } = await api.post('/api/posts', postData)
        dispatch({ type: CREATE_POST_SUCCESS, payload: data })
        console.log("create post ", data)
    } catch (error) {
        console.log("error ", error)
        dispatch({ type: CREATE_POST_FAILURE, payload: error })
    }
}

export const getAllPostAction = () => async (dispatch) => {
    dispatch({ type: GET_ALL_POST_REQUEST })
    try {
        const { data } = await api.get(`/api/posts`)
        dispatch({ type: GET_ALL_POST_SUCCESS, payload: data })
        console.log("get all posts ", data)
    } catch (error) {
        console.log("error ", error)
        dispatch({ type: GET_ALL_POST_FAILURE, payload: error })
    }
}

export const getUsersPostAction = (userId) => async (dispatch) => {
    dispatch({ type: GET_USERS_POST_REQUEST })
    try {
        const { data } = await api.get(`/api/posts/user/${userId}`)
        dispatch({ type: GET_USERS_POST_SUCCESS, payload: data })
        console.log("get users posts ", data)
    } catch (error) {
        console.log("error ", error)
        dispatch({ type: GET_USERS_POST_FAILURE, payload: error })
    }
}

export const likePostAction = (postId) => async (dispatch) => {
    dispatch({ type: LIKE_POST_REQUEST })
    try {
        const { data } = await api.put(`/api/posts/like/${postId}`)
        dispatch({ type: LIKE_POST_SUCCESS, payload: data })
        console.log("like post ", data)
    } catch (error) {
        console.log("error ", error)
        dispatch({ type: LIKE_POST_FAILURE, payload: error })
    }
}

export const repostPostAction = (postId) => async (dispatch) => {
    dispatch({ type: REPOST_REQUEST });
    try {
      const { data } = await api.post(`/api/posts/repost/${postId}`);
      dispatch({ type: REPOST_SUCCESS, payload: data });
    } catch (error) {
      dispatch({
        type: REPOST_FAILURE,
        payload: error.response?.data?.message || "Failed to repost.",
      });
    }
  };

================
File: src/Redux/Post/post.actionType.js
================
export const CREATE_POST_REQUEST = "CREATE_POST_REQUEST";
export const CREATE_POST_SUCCESS = "CREATE_POST_SUCCESS";
export const CREATE_POST_FAILURE = "CREATE_POST_FAILURE";

export const GET_ALL_POST_REQUEST = "GET_ALL_POST_REQUEST";
export const GET_ALL_POST_SUCCESS = "GET_ALL_POST_SUCCESS";
export const GET_ALL_POST_FAILURE = "GET_ALL_POST_FAILURE";

export const GET_USERS_POST_REQUEST = "GET_USERS_POST_REQUEST";
export const GET_USERS_POST_SUCCESS = "GET_USERS_POST_SUCCESS";
export const GET_USERS_POST_FAILURE = "GET_USERS_POST_FAILURE";

export const LIKE_POST_REQUEST = "LIKE_POST_REQUEST";
export const LIKE_POST_SUCCESS = "LIKE_POST_SUCCESS";
export const LIKE_POST_FAILURE = "LIKE_POST_FAILURE";

export const REPOST_REQUEST = "REPOST_REQUEST";
export const REPOST_SUCCESS = "REPOST_SUCCESS";
export const REPOST_FAILURE = "REPOST_FAILURE";

================
File: src/Redux/Post/post.reducer.js
================
import { CREATE_COMMENT_FAILURE, CREATE_COMMENT_REQUEST, CREATE_COMMENT_SUCCESS, LIKE_COMMENT_FAILURE, LIKE_COMMENT_REQUEST, LIKE_COMMENT_SUCCESS } from "../Comment/comment.actionType"
import { CREATE_POST_FAILURE, CREATE_POST_REQUEST, CREATE_POST_SUCCESS, GET_ALL_POST_FAILURE, GET_ALL_POST_REQUEST, GET_ALL_POST_SUCCESS, GET_USERS_POST_FAILURE, GET_USERS_POST_REQUEST, GET_USERS_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, REPOST_FAILURE, REPOST_REQUEST, REPOST_SUCCESS } from "./post.actionType"

const initialState = {
    post: null,
    loading: false,
    error: null,
    posts: [],
    userPosts: [],
    like: null,
    comments: [],
    newComment: null,
    success: false,
}

export const postReducer = (state = initialState, action) => {
    switch (action.type) {
        case CREATE_POST_REQUEST:
        case GET_ALL_POST_REQUEST:
        case GET_USERS_POST_REQUEST:
        case LIKE_POST_REQUEST:
        case CREATE_COMMENT_REQUEST:
        case LIKE_COMMENT_REQUEST:
        case REPOST_REQUEST:
            return {
                ...state,
                error: null,
                loading: true
            }

        case CREATE_POST_SUCCESS:
            return {
                ...state,
                post: action.payload,
                posts: [action.payload, ...state.posts],
                loading: false,
                error: null
            }

        case GET_ALL_POST_SUCCESS:
            return {
                ...state,
                posts: action.payload,
                comments: action.payload.comments,
                loading: false,
                error: null
            }

        case GET_USERS_POST_SUCCESS:
            return {
                ...state,
                userPosts: action.payload,
                loading: false,
                error: null,
            };

        case LIKE_POST_SUCCESS:
            return {
                ...state,
                like: action.payload,
                posts: state.posts.map((item) => item.id === action.payload.id ? action.payload : item),
                userPosts: state.userPosts.map((item) =>
                    item.id === action.payload.id ? action.payload : item
                ),
                loading: false,
                error: null
            }

        case CREATE_COMMENT_SUCCESS:
            return {
                ...state,
                newComment: action.payload,
                loading: false,
                error: null
            }

        case LIKE_COMMENT_SUCCESS:
            return {

            }

        case REPOST_SUCCESS:
            return {
                ...state,
                loading: false,
                posts: [action.payload, ...state.posts],
                error: null,
                success: true,
            };

        case CREATE_POST_FAILURE:
        case GET_ALL_POST_FAILURE:
        case GET_USERS_POST_FAILURE:
        case LIKE_POST_FAILURE:
        case CREATE_COMMENT_FAILURE:
        case LIKE_COMMENT_FAILURE:
        case REPOST_FAILURE:
            return {
                ...state,
                error: action.payload,
                loading: false
            }

        default:
            return state;
    }
}

================
File: src/Redux/store.js
================
import { applyMiddleware, combineReducers, legacy_createStore } from "redux";
import { thunk } from "redux-thunk";
import { authReducer } from "./Auth/auth.reducer";
import { postReducer } from "./Post/post.reducer";
import { messageReducer } from "./Message/message.reducer";
import { userReducer } from "./User/user.reducer";

const rootReducers = combineReducers({
    auth: authReducer,
    user: userReducer,
    post: postReducer,
    message: messageReducer,
})

export const store = legacy_createStore(rootReducers, applyMiddleware(thunk))

================
File: src/Redux/User/user.action.js
================
// src/Redux/User/user.action.js

import axios from 'axios';
import {
  GET_PROFILE_REQUEST,
  GET_PROFILE_SUCCESS,
  GET_PROFILE_FAILURE,
  UPDATE_PROFILE_REQUEST,
  UPDATE_PROFILE_SUCCESS,
  UPDATE_PROFILE_FAILURE,
  SEARCH_USER_REQUEST,
  SEARCH_USER_SUCCESS,
  SEARCH_USER_FAILURE,
  FETCH_USER_PROFILE_REQUEST,
  FETCH_USER_PROFILE_SUCCESS,
  FETCH_USER_PROFILE_FAILURE,
  SAVE_POST_REQUEST,
  SAVE_POST_SUCCESS,
  SAVE_POST_FAILURE,
  FETCH_SAVED_POSTS_REQUEST,
  FETCH_SAVED_POSTS_SUCCESS,
  FETCH_SAVED_POSTS_FAILURE,
} from './user.types';
import { api, API_BASE_URL } from '../../config/api';


export const fetchUserProfileAction = (id) => async (dispatch) => {
  dispatch({ type: FETCH_USER_PROFILE_REQUEST });
  try {
    const response = await api.get(`/api/users/${id}`);
    dispatch({
      type: FETCH_USER_PROFILE_SUCCESS,
      payload: response.data,
    });
    console.log('user profile ---', response.data);
  } catch (error) {
    dispatch({
      type: FETCH_USER_PROFILE_FAILURE,
      payload: error.response?.data?.message || 'Failed to fetch user profile.',
    });
  }
};

export const getProfileAction = (jwt) => async (dispatch) => {
  dispatch({ type: GET_PROFILE_REQUEST });
  try {
    const { data } = await axios.get(`${API_BASE_URL}/api/users/profile`, {
      headers: {
        Authorization: `Bearer ${jwt}`,
      },
    });

    dispatch({ type: GET_PROFILE_SUCCESS, payload: data });
    console.log('profile ---', data);
  } catch (error) {
    console.log('-----', error);
    dispatch({ type: GET_PROFILE_FAILURE, payload: error.message });
  }
};

export const updateProfileAction = (reqData) => async (dispatch) => {
  dispatch({ type: UPDATE_PROFILE_REQUEST });
  try {
    const jwt = localStorage.getItem('jwt'); // Ensure JWT is retrieved correctly
    const { data } = await axios.put(`${API_BASE_URL}/api/users`, reqData, {
      headers: {
        Authorization: `Bearer ${jwt}`,
      },
    });

    dispatch({ type: UPDATE_PROFILE_SUCCESS, payload: data });
    console.log('update profile ---', data);
  } catch (error) {
    console.log('-----', error);
    dispatch({ type: UPDATE_PROFILE_FAILURE, payload: error.message });
  }
};

export const searchUser = (query) => async (dispatch) => {
  dispatch({ type: SEARCH_USER_REQUEST });
  try {
    const jwt = localStorage.getItem('jwt'); // Ensure JWT is retrieved correctly
    const { data } = await axios.get(`${API_BASE_URL}/api/users/search?query=${query}`, {
      headers: {
        Authorization: `Bearer ${jwt}`,
      },
    });
    dispatch({ type: SEARCH_USER_SUCCESS, payload: data });
    console.log('search user ---', data);
  } catch (error) {
    console.log('-----', error);
    dispatch({ type: SEARCH_USER_FAILURE, payload: error.message });
  }
};

export const savePostAction = (postId) => async (dispatch) => {
  dispatch({ type: SAVE_POST_REQUEST })
  try {
      const { data } = await api.post(`/api/users/save/${postId}`)
      dispatch({ type: SAVE_POST_SUCCESS, payload: data })
      console.log("handle save or unsave post ", data)
  } catch (error) {
      console.log("error ", error)
      dispatch({ type: SAVE_POST_FAILURE, payload: error })
  }
}

export const getSavedPostsAction = () => async (dispatch) => {
  dispatch({ type: FETCH_SAVED_POSTS_REQUEST });
  try {
    const { data } = await api.get(`/api/users/save`);

    dispatch({ type: FETCH_SAVED_POSTS_SUCCESS, payload: data });
  } catch (error) {
    dispatch({
      type: FETCH_SAVED_POSTS_FAILURE,
      payload: error.response?.data || 'Failed to fetch saved posts',
    });
  }
};


// export const getProfileAction = (jwt) => async (dispatch) => {
//     dispatch({ type: GET_PROFILE_REQUEST })
//     try {
//         const { data } = await axios.get(`${API_BASE_URL}/api/users/profile`, {
//             headers: {
//                 "Authorization": `Bearer ${jwt}`
//             }
//         })


//         dispatch({ type: GET_PROFILE_SUCCESS, payload: data })
//         console.log("profile ---", data)

//     } catch (error) {
//         console.log("-----", error)
//         dispatch({ type: GET_PROFILE_FAILURE, payload: error })
//     }
// }

// export const updateProfileAction = (reqData) => async (dispatch) => {
//     dispatch({ type: UPDATE_PROFILE_REQUEST })
//     try {
//         const { data } = await api.put(`${API_BASE_URL}/api/users`, reqData)


//         dispatch({ type: UPDATE_PROFILE_SUCCESS, payload: data })
//         console.log("update profile ---", data)

//     } catch (error) {
//         console.log("-----", error)
//         dispatch({ type: UPDATE_PROFILE_FAILURE, payload: error })
//     }
// }

// export const searchUser = (query) => async (dispatch) => {
//     dispatch({ type: SEARCH_USER_REQUEST })
//     try {
//         const { data } = await api.get(`/api/users/search?query=${query}`)
//         dispatch({ type: SEARCH_USER_SUCCESS, payload: data })
//         console.log("search user ---", data)

//     } catch (error) {
//         console.log("-----", error)
//         dispatch({ type: SEARCH_USER_FAILURE, payload: error })
//     }
// }

================
File: src/Redux/User/user.reducer.js
================
// src/Redux/User/user.reducer.js

import {
    GET_PROFILE_REQUEST,
    GET_PROFILE_SUCCESS,
    GET_PROFILE_FAILURE,
    UPDATE_PROFILE_REQUEST,
    UPDATE_PROFILE_SUCCESS,
    UPDATE_PROFILE_FAILURE,
    SEARCH_USER_REQUEST,
    SEARCH_USER_SUCCESS,
    SEARCH_USER_FAILURE,
    FETCH_USER_PROFILE_REQUEST,
    FETCH_USER_PROFILE_SUCCESS,
    FETCH_USER_PROFILE_FAILURE,
    SAVE_POST_REQUEST,
    SAVE_POST_SUCCESS,
    SAVE_POST_FAILURE,
    FETCH_SAVED_POSTS_REQUEST,
    FETCH_SAVED_POSTS_SUCCESS,
    FETCH_SAVED_POSTS_FAILURE,
} from './user.types';

const initialState = {
    profile: {
        loading: false,
        data: null,
        error: null,
    },
    savedPosts: {
        loading: false,
        data: [],
        error: null,
    },
    search: {
        loading: false,
        results: [],
        error: null,
    },
    // Add other user-related state slices if necessary
};

export const userReducer = (state = initialState, action) => {
    switch (action.type) {
        // Get Profile
        case GET_PROFILE_REQUEST:
            return {
                ...state,
                profile: {
                    ...state.profile,
                    loading: true,
                    error: null,
                },
            };
        case GET_PROFILE_SUCCESS:
            return {
                ...state,
                profile: {
                    loading: false,
                    data: action.payload,
                    error: null,
                },
            };
        case GET_PROFILE_FAILURE:
            return {
                ...state,
                profile: {
                    loading: false,
                    data: null,
                    error: action.payload,
                },
            };

        // Update Profile
        case UPDATE_PROFILE_REQUEST:
            return {
                ...state,
                profile: {
                    ...state.profile,
                    loading: true,
                    error: null,
                },
            };
        case UPDATE_PROFILE_SUCCESS:
            return {
                ...state,
                profile: {
                    loading: false,
                    data: action.payload,
                    error: null,
                },
            };
        case UPDATE_PROFILE_FAILURE:
            return {
                ...state,
                profile: {
                    loading: false,
                    data: null,
                    error: action.payload,
                },
            };

        // Search User
        case SEARCH_USER_REQUEST:
            return {
                ...state,
                search: {
                    loading: true,
                    results: [],
                    error: null,
                },
            };
        case SEARCH_USER_SUCCESS:
            return {
                ...state,
                search: {
                    loading: false,
                    results: action.payload,
                    error: null,
                },
            };
        case SEARCH_USER_FAILURE:
            return {
                ...state,
                search: {
                    loading: false,
                    results: [],
                    error: action.payload,
                },
            };

        case FETCH_USER_PROFILE_REQUEST:
            return {
                ...state,
                profile: {
                    ...state.profile,
                    loading: true,
                    error: null,
                }
            };
        case FETCH_USER_PROFILE_SUCCESS:
            return {
                ...state,
                profile: {
                    loading: false,
                    data: action.payload,
                    error: null,
                }
            };
        case FETCH_USER_PROFILE_FAILURE:
            return {
                ...state,
                profile: {
                    loading: false,
                    data: null,
                    error: action.payload,
                }
            };

        case SAVE_POST_REQUEST:
            return {
                ...state,
                savedPosts: {
                    ...state.savedPosts,
                    loading: true,
                    error: null,
                },
            };
        case SAVE_POST_SUCCESS:
            const updatedPost = action.payload; // The saved/unsaved post
            const isAlreadySaved = state.savedPosts.data?.some(post => post.id === updatedPost.id);

            return {
                ...state,
                savedPosts: {
                    ...state.savedPosts,
                    loading: false,
                    data: isAlreadySaved
                        ? state.savedPosts.data.filter(post => post.id !== updatedPost.id)
                        : [...(state.savedPosts.data || []), updatedPost], 
                    error: null,
                },
            };
        case SAVE_POST_FAILURE:
            return {
                ...state,
                savedPosts: {
                    ...state.savedPosts,
                    loading: false,
                    error: action.payload,
                },
            };

        case FETCH_SAVED_POSTS_REQUEST:
            return {
                ...state,
                savedPosts: {
                    ...state.savedPosts,
                    loading: true,
                    error: null,
                },
            };
        case FETCH_SAVED_POSTS_SUCCESS:
            return {
                ...state,
                savedPosts: {
                    ...state.savedPosts,
                    loading: false,
                    data: action.payload,
                    error: null,
                },
            };
        case FETCH_SAVED_POSTS_FAILURE:
            return {
                ...state,
                savedPosts: {
                    ...state.savedPosts,
                    loading: false,
                    error: action.payload,
                },
            };

        // Default
        default:
            return state;
    }
};

================
File: src/Redux/User/user.types.js
================
export const GET_PROFILE_REQUEST = "GET_PROFILE_REQUEST";
export const GET_PROFILE_SUCCESS = "GET_PROFILE_SUCCESS";
export const GET_PROFILE_FAILURE = "GET_PROFILE_FAILURE";

export const UPDATE_PROFILE_REQUEST = "UPDATE_PROFILE_REQUEST";
export const UPDATE_PROFILE_SUCCESS = "UPDATE_PROFILE_SUCCESS";
export const UPDATE_PROFILE_FAILURE = "UPDATE_PROFILE_FAILURE";

export const SEARCH_USER_REQUEST = "SEARCH_USER_REQUEST";
export const SEARCH_USER_SUCCESS = "SEARCH_USER_SUCCESS";
export const SEARCH_USER_FAILURE = "SEARCH_USER_FAILURE";

export const FETCH_USER_PROFILE_REQUEST = "FETCH_USER_PROFILE_REQUEST";
export const FETCH_USER_PROFILE_SUCCESS = "FETCH_USER_PROFILE_SUCCESS";
export const FETCH_USER_PROFILE_FAILURE = "FETCH_USER_PROFILE_FAILURE";

export const SAVE_POST_REQUEST = "SAVE_POST_REQUEST";
export const SAVE_POST_SUCCESS = "SAVE_POST_SUCCESS";
export const SAVE_POST_FAILURE = "SAVE_POST_FAILURE";

export const FETCH_SAVED_POSTS_REQUEST = "FETCH_SAVED_POSTS_REQUEST";
export const FETCH_SAVED_POSTS_SUCCESS = "FETCH_SAVED_POSTS_SUCCESS";
export const FETCH_SAVED_POSTS_FAILURE = "FETCH_SAVED_POSTS_FAILURE";

================
File: src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: src/theme/DarkTheme.js
================
import { createTheme } from "@mui/material";

export const darkTheme = createTheme({
    palette: {
        mode: "dark",
        primary: {
            main: "rgb(88,199,250)"
        },
        secondary: {
            main: "#5A20CB"
        },
        background: {
            main: "#212534",
            default: "#212534",
            paper: "#212534"
        }

    }
})

================
File: src/utils/isLikedByReqUser.js
================
export const isLikedByReqUser = (reqUserId, post) => {
    for (let user of post.liked) {
        if (reqUserId === user.id) {
            return true;
        }
    }
    return false;
}

================
File: src/utils/isSavedByReqUser.js
================
export const isSavedByReqUser = (reqUserId, post) => {
    console.log(post);
    // for (let user of post) {
    //     if (reqUserId === user.id) {
    //         return true;
    //     }
    // }
    return false;
}

================
File: src/utils/uploadToCloudinary.js
================
const cloud_name = "dth56cl5u";

const upload_preset = "social-media"

export const uploadToCloudinary = async (pics, fileType) => {
    if (pics && fileType) {
        const data = new FormData()
        data.append("file", pics)
        data.append("upload_preset", upload_preset)
        data.append("cloud_name", cloud_name)

        const res = await fetch(`https://api.cloudinary.com/v1_1/${cloud_name}/${fileType}/upload`, { method: "post", body: data })

        console.log("res", res)

        const fileData = await res.json()
        console.log("fileData url", fileData.url)
        return fileData.url
    } else {
        console.log("Error uploading ...")
    }
}
